TODO:
* Implement UR logics
* Implement Bent subset logics, including
  - APE : Bent subset of rank 1
  - Sue-de-coq : Bent subset of rank 0
* Find a way to further classify the type of logic (such as discerning XY-wing, XYZ-wing, WXYZ-wing, W-wing, ALS, Simple Coloring, etc.)
* Improve visual representation of AIC logic. (In particular, implement link-type annotations.)
* Refactor the graphical notation.
* Implement Exocet
* Consider using WebAssembly (such as AssemblyScript) to improve speed.
* Make it frigging interactive! Darn it...
* Add 'Jump To' button to each history item.
* Better way to manage database.


[Functionality]
The functionalities I need:

* Loops through the vertices.
  for (&v:V)
* Loops through the vertices in an edge.
  for (&v:V --<E>)
* Loops through the vertices joined from a given (set of) vertex by edges of the specified types.
  for (&v:V --Set<E~T>--> Set<V>)

* Loops through the edges.
  for (&e:E)
* Loops through the edges of the specified types.
  for (&e:E~T)
* Loops through the edges of the specified types incident to a given (set of) vertex.
  for (&e:E~T <-- Set<V>)
* Loops through the edges of the specified types incident to a given edge.
  for (&e:E~T -->*<-- e':E)
* Loops through subsets of sets of edges.
* Union of all vertices in the edges of an edge set.

* Systematically add vertices and edges to the a given puzzle. (Automatically updates the incidence structure.)
* Well-designed selector of a vertex, edge, ...


[Implementaion Plan]

1. A vertex is actually a singleton edge containing itself (or more precisely, a reference to itself).
  - Why? Can use the same methodology for computing incidence structure.
  - Easily generalizes to "grouped vertices".

2. An edge is a set of vertices.

3. Each vertex knows its incident edges and their types.

4. Each edge must be uniquely specified by a suitable choice of selector.
  - In particular, it must have enough information (suc as ID) to be distinguishable from others.

5. Needs an efficient way of selecting edges through selector.

6. Perhaps separate the whole puzzle into 3 (or several) mutually disconnected parts:

  - clue: The subgraph of all clue pencilmarks.
  - determined: The subgraph of all determined pencilmarks.
  - rest

  Each parts affect the logic in a different way. (For example, whether part of a UR pattern overlaps the clue part or determined part affects the UR logic differently; the clue part destroys UR-symmetry, whereas the determined part not.)

  This also helps reduce the number of edges to scan.

Edge selector examples:

v #{r2c3n7}
  : a pencilmark with value 7 at Cell (2, 3) = B3

v.given #{r8c2n4}
  : value 4 is a given at Cell (8, 2) = H2

v.found #{r8c2n4}
  : Cell (8, 2) = H2 is determined as 4.

v #{r23c46n1}
  : an abstract pencilmark represernting the locked X-wing with rows 2|3, columns 4|6 with value 1.

v #{r2c135n347}
  : an abstract pencilmark representing the locked triple with row 2, columns 1|3|5 with values 3|4|7.

v #{r2b1n3}
  : an abstract pencilmark representing the locked miniline that is the intersection of row 2 and box 1 with value 3.

e #{b5n6}
  : rule unit representing pencilmarks with value 6 in Box 5.



[Sudoku Puzzle Specification]

R1 = <1, [1, 9]>
R2 = <2, [1, 9]>




[Configuration Selector]

Q: Why do we need this?
A: To specify which type of configurations will be explored in the "compile" time.

Primitive selectors:
* RiCj = Cell at (i, j)
* RiVn = Row i with value n
* CjVn = Column j with value n
* BkVn = Box k with value n
* _i = i-th generic variable (assumed to have different values from all the previous variables)

Operators:
* !A = not A
* A & B = both A and B
* A | B = either A or B
* A~>B = A is adjacent to B
* A[cond(#)] = The number (#) of elements of A satisfies cond(#)

Syntactic sugars:
* Ri = (RiC1 | ... | RiC9) | (RiV1 | ... | RiV9) // edges in Row i
* Cj = (R1Cj | ... | R9Cj) | (CjV1 | ... | CjV9) // edges in Column j
* Bk = [any cell in Bk] | (BkV1 | ... | BkV9) // edges in Box k
* Vn = (R1Vn | ... | R9Vn) | (C1Vn | ... | C9Vn) | (B1Vn | ... | B9Vn) // edges with value n


Example1. Primitive selectors can be regarded as intersections. For example,

Ri & Cj = RiCj


Example 2. Two bivalue cells in the same row:

R_1C_1[#=2] | R_1C_2[#=2]
= (R_1C_1 | R_1C_2)[#=2]
= (R_1&[C_1|C_2])[#=2]


Example 3. Two bivalue cells in the same row and sharing at least one candidate:

(R_1&[C_1|C_2])[#=2]~>V_1


Example 3. 

(R_1 & (C_1|C_2)) | ((R_1|R_2|R_3) & C_1)
= R_1C_1 | R_1C_2 | R_2C_1 | R_3C_1