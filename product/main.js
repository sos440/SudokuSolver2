/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./source/geom.js":
/*!************************!*\
  !*** ./source/geom.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GameSudokuVanilla\": () => (/* binding */ GameSudokuVanilla),\n/* harmony export */   \"Hypergraph\": () => (/* binding */ Hypergraph),\n/* harmony export */   \"LabeledVertex\": () => (/* binding */ LabeledVertex),\n/* harmony export */   \"Multiset\": () => (/* binding */ Multiset)\n/* harmony export */ });\n/* harmony import */ var _tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tools */ \"./source/tools.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n/**\r\n * @module hypergraph\r\n */\n\n\n\n/**\r\n * Represents multisets (with multiplicites taking integer values).\r\n */\nvar Multiset = /*#__PURE__*/function (_Map) {\n  _inherits(Multiset, _Map);\n  var _super = _createSuper(Multiset);\n  /** @param {any[]} element_list The array of elements */\n  function Multiset(element_list) {\n    var _this;\n    _classCallCheck(this, Multiset);\n    _this = _super.call(this);\n    if (element_list instanceof Array) {\n      var _iterator = _createForOfIteratorHelper(element_list),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var element = _step.value;\n          _this.add(element);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    } else if (typeof element_list != 'undefined') {\n      _this.add(element_list);\n    }\n    return _this;\n  }\n\n  /**\r\n   * Count the total count.\r\n   * @returns {number} The total count.\r\n   */\n  _createClass(Multiset, [{\n    key: \"count\",\n    get: function get() {\n      return Array.from(this.values()).reduce(function (s, x) {\n        return s + x;\n      }, 0);\n    }\n\n    /**\r\n     * Add an element to the multiset.\r\n     * @param {any} element The element to be added.\r\n     * @returns {Multiset} The current multiset.\r\n     */\n  }, {\n    key: \"add\",\n    value: function add(element) {\n      var _this$get;\n      this.set(element, ((_this$get = this.get(element)) !== null && _this$get !== void 0 ? _this$get : 0) + 1);\n      return this;\n    }\n\n    /**\r\n     * Remove an element to the multiset.\r\n     * @param {any} element The element to be removed.\r\n     * @returns {Multiset} The current multiset.\r\n     */\n  }, {\n    key: \"remove\",\n    value: function remove(element) {\n      var _this$get2;\n      this.set(element, ((_this$get2 = this.get(element)) !== null && _this$get2 !== void 0 ? _this$get2 : 0) - 1);\n      return this;\n    }\n\n    /**\r\n     * A boolean callback function that iterates through the entries.\r\n     * @callback iterateBoolean\r\n     * @param {any} element The current element.\r\n     * @param {number} count The current count.\r\n     * @param {Multiset} this The current multiset.\r\n     * @returns {boolean} The truth value.\r\n     */\n\n    /**\r\n     * Check if the condition is satisfied by every distinguished elements.\r\n     * @param {iterateBoolean} callbackfn The test function to evaluate through the elements.\r\n     * @returns {boolean} True if the test function results in true for every element.\r\n     */\n  }, {\n    key: \"every\",\n    value: function every(callbackfn) {\n      var _iterator2 = _createForOfIteratorHelper(this.entries()),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n            element = _step2$value[0],\n            count = _step2$value[1];\n          if (!callbackfn(element, count, this)) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return true;\n    }\n\n    /**\r\n     * Check if the condition is satisfied by some distinguished element.\r\n     * @param {iterateBoolean} callbackfn The test function to evaluate through the elements.\r\n     * @returns {boolean} True if the test function results in true for some element.\r\n     */\n  }, {\n    key: \"some\",\n    value: function some(callbackfn) {\n      var _iterator3 = _createForOfIteratorHelper(this.entries()),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _step3$value = _slicedToArray(_step3.value, 2),\n            element = _step3$value[0],\n            count = _step3$value[1];\n          if (callbackfn(element, count, this)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return false;\n    }\n\n    /**\r\n     * Filter all the elements satisfying the condition.\r\n     * @param {iterateBoolean} callbackfn The test function to evaluate through the elements.\r\n     * @returns {Multiset} The sub-multiset consisting of all element satisfying the test function.\r\n     */\n  }, {\n    key: \"filter\",\n    value: function filter(callbackfn) {\n      var result = new Multiset();\n      var _iterator4 = _createForOfIteratorHelper(this.entries()),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _step4$value = _slicedToArray(_step4.value, 2),\n            element = _step4$value[0],\n            count = _step4$value[1];\n          if (callbackfn(element, count, this)) {\n            result.set(element, count);\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      return result;\n    }\n\n    /**\r\n     * Check if every count is non-negative.\r\n     * @param {Multiset} cur_set The callback function to evaluate through the elements.\r\n     * @returns {boolean} True if the callback is true for every element.\r\n     */\n  }], [{\n    key: \"geqZero\",\n    value: function geqZero(cur_set) {\n      var _iterator5 = _createForOfIteratorHelper(cur_set.entries()),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _step5$value = _slicedToArray(_step5.value, 2),\n            _ = _step5$value[0],\n            count = _step5$value[1];\n          if (count < 0) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      return true;\n    }\n\n    /**\r\n     * Check if set_a(x) >= set_b(x) for all x.\r\n     * @param {Multiset} set_a The multiset to compare.\r\n     * @param {Multiset} set_b The multiset to compare.\r\n     * @returns {boolean} True if set_a(x) >= set_b(x) for all x.\r\n     */\n  }, {\n    key: \"geq\",\n    value: function geq(set_a, set_b) {\n      var _iterator6 = _createForOfIteratorHelper(set_a.entries()),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _set_b$get;\n          var _step6$value = _slicedToArray(_step6.value, 2),\n            element_a = _step6$value[0],\n            count_a = _step6$value[1];\n          if (count_a < ((_set_b$get = set_b.get(element_a)) !== null && _set_b$get !== void 0 ? _set_b$get : 0)) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      var _iterator7 = _createForOfIteratorHelper(set_b.entries()),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _set_a$get;\n          var _step7$value = _slicedToArray(_step7.value, 2),\n            element_b = _step7$value[0],\n            count_b = _step7$value[1];\n          if (count_b > ((_set_a$get = set_a.get(element_b)) !== null && _set_a$get !== void 0 ? _set_a$get : 0)) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      return true;\n    }\n\n    /**\r\n     * Add multisets.\r\n     * @param {...Multiset} summands Multisets to be summed up.\r\n     * @returns The sum.\r\n     */\n  }, {\n    key: \"add\",\n    value: function add() {\n      var result = new Multiset();\n      for (var _len = arguments.length, summands = new Array(_len), _key = 0; _key < _len; _key++) {\n        summands[_key] = arguments[_key];\n      }\n      for (var _i2 = 0, _summands = summands; _i2 < _summands.length; _i2++) {\n        var cur_set = _summands[_i2];\n        var _iterator8 = _createForOfIteratorHelper(cur_set.entries()),\n          _step8;\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            var _result$get;\n            var _step8$value = _slicedToArray(_step8.value, 2),\n              element = _step8$value[0],\n              count = _step8$value[1];\n            result.set(element, ((_result$get = result.get(element)) !== null && _result$get !== void 0 ? _result$get : 0) + count);\n          }\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n      }\n      /** Eliminiate zero-count elements. */\n      var _iterator9 = _createForOfIteratorHelper(result.entries()),\n        _step9;\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var _step9$value = _slicedToArray(_step9.value, 2),\n            _element = _step9$value[0],\n            _count = _step9$value[1];\n          if (_count == 0) {\n            result[\"delete\"](_element);\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n      return result;\n    }\n\n    /**\r\n     * Subtract a multiset from another.\r\n     * @param {Multiset} set_a The multiset to be subtracted from.\r\n     * @param {Multiset} set_b The multiset to subtract.\r\n     * @returns The difference.\r\n     */\n  }, {\n    key: \"subtract\",\n    value: function subtract(set_a, set_b) {\n      var result = new Multiset();\n      var _iterator10 = _createForOfIteratorHelper(set_a.entries()),\n        _step10;\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var _step10$value = _slicedToArray(_step10.value, 2),\n            element = _step10$value[0],\n            count = _step10$value[1];\n          result.set(element, count);\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n      var _iterator11 = _createForOfIteratorHelper(set_b.entries()),\n        _step11;\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var _result$get2;\n          var _step11$value = _slicedToArray(_step11.value, 2),\n            _element2 = _step11$value[0],\n            _count2 = _step11$value[1];\n          result.set(_element2, ((_result$get2 = result.get(_element2)) !== null && _result$get2 !== void 0 ? _result$get2 : 0) - _count2);\n        }\n        /** Eliminiate zero-count elements. */\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n      var _iterator12 = _createForOfIteratorHelper(result.entries()),\n        _step12;\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          var _step12$value = _slicedToArray(_step12.value, 2),\n            _element3 = _step12$value[0],\n            _count3 = _step12$value[1];\n          if (_count3 == 0) {\n            result[\"delete\"](_element3);\n          }\n        }\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n      return result;\n    }\n  }]);\n  return Multiset;\n}( /*#__PURE__*/_wrapNativeSuper(Map));\n\n/** \r\n * Represents labeled vertices.\r\n */\nvar LabeledVertex = /*#__PURE__*/_createClass(function LabeledVertex() {\n  _classCallCheck(this, LabeledVertex);\n  /** @type {Map<string, number>} This stores labels as [key, value] pairs. */\n  this.labels = new Map();\n  /** @type {Map<string, Set<number>>} This stores layes as [group_name, index_list] pairs. */\n  this.layers = new Map();\n});\n\n/**\r\n * A callback function that performs a test on each vertex.\r\n * @callback callback_boolean\r\n * @param {LabeledVertex} v The vertex to test.\r\n * @param {number} [index] The index of the vertex in the vertex list.\r\n * @returns {boolean} The truth value.\r\n */\n\n/**\r\n * Interface for hypergraphs that represent exact hitting games.\r\n * Any instance of this class is inteded as immutable, \r\n * hence its structure must be determined at the time of its creation.\r\n */\nvar Hypergraph = /*#__PURE__*/function () {\n  /** @param {...string} name_list The names of edge groups. */\n  function Hypergraph() {\n    _classCallCheck(this, Hypergraph);\n    /** \r\n     * The sparse array of the form {index => vertex}.\r\n     * @type {Map<number, LabeledVertex>}\r\n     */\n    this.vertices = new Map();\n    /** \r\n     * The sparse tensor of the form {name => serial_no => vertex}.\r\n     * @type {Map<string, Map<number, Multiset>>}\r\n     */\n    for (var _len2 = arguments.length, name_list = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      name_list[_key2] = arguments[_key2];\n    }\n    this.edgeGroups = new Map(name_list.map(function (name) {\n      return [name, new Map()];\n    }));\n  }\n\n  /** \r\n   * Compute the transpose of the sparse tensor\r\n   * v => name => index\r\n   * in the form\r\n   * name => index => v\r\n   */\n  _createClass(Hypergraph, [{\n    key: \"computeHyperedges\",\n    value: function computeHyperedges() {\n      var _iterator13 = _createForOfIteratorHelper(this.edgeGroups.entries()),\n        _step13;\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var _step13$value = _slicedToArray(_step13.value, 2),\n            name = _step13$value[0],\n            group = _step13$value[1];\n          var _iterator14 = _createForOfIteratorHelper(this.vertices.values()),\n            _step14;\n          try {\n            for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n              var v = _step14.value;\n              var v_layers = v.layers;\n              var _iterator15 = _createForOfIteratorHelper(v_layers.get(name)),\n                _step15;\n              try {\n                for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n                  var serial_no = _step15.value;\n                  if (group.has(serial_no)) {\n                    group.get(serial_no).add(v);\n                  } else {\n                    var new_edge = new Multiset();\n                    new_edge.add(v);\n                    group.set(serial_no, new_edge);\n                  }\n                }\n              } catch (err) {\n                _iterator15.e(err);\n              } finally {\n                _iterator15.f();\n              }\n            }\n          } catch (err) {\n            _iterator14.e(err);\n          } finally {\n            _iterator14.f();\n          }\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n    }\n\n    /**\r\n     * Create a subgraph consisting of all \r\n     * @param {number[] | callback_boolean} any_filter The test function.\r\n     * @returns {Hypergraph} The subgraph consisting of all vertices passing the test.\r\n     */\n  }, {\n    key: \"filter\",\n    value: function filter(any_filter) {\n      var g = _construct(Hypergraph, _toConsumableArray(this.edgeGroups.keys()));\n\n      /** Filter vertices. */\n      if (typeof any_filter == 'function') {\n        var _iterator16 = _createForOfIteratorHelper(this.vertices.entries()),\n          _step16;\n        try {\n          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n            var _step16$value = _slicedToArray(_step16.value, 2),\n              index = _step16$value[0],\n              v = _step16$value[1];\n            if (any_filter(v, index)) {\n              g.vertices.set(index, v);\n            }\n          }\n        } catch (err) {\n          _iterator16.e(err);\n        } finally {\n          _iterator16.f();\n        }\n      } else if (any_filter instanceof Array) {\n        var _iterator17 = _createForOfIteratorHelper(any_filter),\n          _step17;\n        try {\n          for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n            var _index = _step17.value;\n            if (this.vertices.has(_index)) {\n              g.vertices.set(_index, this.vertices.get(_index));\n            }\n          }\n        } catch (err) {\n          _iterator17.e(err);\n        } finally {\n          _iterator17.f();\n        }\n      } else {\n        throw TypeError(\"'\".concat(any_filter, \"' is not a valid type of filters.\"));\n      }\n\n      /** Fill in vertices to hyperedges. */\n      g.computeHyperedges();\n      return g;\n    }\n  }]);\n  return Hypergraph;\n}();\n\n/**\r\n * Represents vanilla sudoku of size parameter Dp\r\n */\nvar GameSudokuVanilla = /*#__PURE__*/function (_Hypergraph) {\n  _inherits(GameSudokuVanilla, _Hypergraph);\n  var _super2 = _createSuper(GameSudokuVanilla);\n  /** @param {number} Dp The dimensional parameter on which all the others depend. */\n  function GameSudokuVanilla(Dp) {\n    var _this2;\n    _classCallCheck(this, GameSudokuVanilla);\n    _this2 = _super2.call(this, 'rc', 'rk', 'ck', 'bk');\n\n    /** @type {number} The dimensional parameter on which all the others depend. */\n    _this2.Dp = Dp;\n    /** @type {number} The length of each side. */\n    _this2.D1 = Math.pow(_this2.Dp, 2);\n    /** @type {number} The area of the botton. */\n    _this2.D2 = Math.pow(_this2.D1, 2);\n    /** @type {number} Tehe volume of the 3D lattice. */\n    _this2.D3 = Math.pow(_this2.D1, 3);\n\n    /** Compute vertices. */\n    var base_Dp = new _tools__WEBPACK_IMPORTED_MODULE_0__.BaseN(_this2.Dp);\n    var base_D1 = new _tools__WEBPACK_IMPORTED_MODULE_0__.BaseN(_this2.D1);\n    var _iterator18 = _createForOfIteratorHelper(new Array(_this2.D3).keys()),\n      _step18;\n    try {\n      for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n        var index = _step18.value;\n        var v = new LabeledVertex();\n        _this2.vertices.set(index, v);\n        var _base_D1$toDigits = base_D1.toDigits(index, 3),\n          _base_D1$toDigits2 = _slicedToArray(_base_D1$toDigits, 3),\n          row = _base_D1$toDigits2[0],\n          col = _base_D1$toDigits2[1],\n          key = _base_D1$toDigits2[2];\n        var digits = base_Dp.toDigits(index, 6);\n        var box = base_Dp.fromDigits([digits[0], digits[2]]);\n        var inn = base_Dp.fromDigits([digits[1], digits[3]]);\n        v.labels.set('index', index).set('row', row).set('col', col).set('key', key).set('box', box).set('inn', inn);\n        v.layers.set('rc', new Set().add(base_D1.fromDigits([row, col]))).set('rk', new Set().add(base_D1.fromDigits([row, key]))).set('ck', new Set().add(base_D1.fromDigits([col, key]))).set('bk', new Set().add(base_D1.fromDigits([box, key])));\n      }\n\n      /** Compute hyperedge groups. */\n    } catch (err) {\n      _iterator18.e(err);\n    } finally {\n      _iterator18.f();\n    }\n    _this2.computeHyperedges();\n    return _this2;\n  }\n  return _createClass(GameSudokuVanilla);\n}(Hypergraph);\n\n//# sourceURL=webpack://my-webpack-project/./source/geom.js?");

/***/ }),

/***/ "./source/index.js":
/*!*************************!*\
  !*** ./source/index.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tools */ \"./source/tools.js\");\n/* harmony import */ var _geom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./geom */ \"./source/geom.js\");\n\n\nvar sudoku = new _geom__WEBPACK_IMPORTED_MODULE_1__.GameSudokuVanilla(3);\nconsole.log(sudoku.edgeGroups.get('rk').get(3));\nvar conn = sudoku.filter([3, 7, 13, 115, 368]);\nconsole.log(conn.edgeGroups.get('rk').keys());\n\n//# sourceURL=webpack://my-webpack-project/./source/index.js?");

/***/ }),

/***/ "./source/tools.js":
/*!*************************!*\
  !*** ./source/tools.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BaseN\": () => (/* binding */ BaseN),\n/* harmony export */   \"MDIterator\": () => (/* binding */ MDIterator),\n/* harmony export */   \"init\": () => (/* binding */ init)\n/* harmony export */ });\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n/**\r\n * @module tools\r\n */\n\n/**\r\n * A representation of base-n representation.\r\n */\nvar BaseN = /*#__PURE__*/function () {\n  /** @param {number} base The base. */\n  function BaseN(base) {\n    _classCallCheck(this, BaseN);\n    this.base = base;\n  }\n\n  /**\r\n   * Convert the digit sequence, interpreted as a base-n representation, to a number.\r\n   * @param {number[]} digits The sequence of digits in decreasing order of importance. \r\n   * @returns {number} The number.\r\n   */\n  _createClass(BaseN, [{\n    key: \"fromDigits\",\n    value: function fromDigits(digits) {\n      var _this = this;\n      return digits.reduce(function (p, a) {\n        return p * _this.base + a;\n      }, 0);\n    }\n\n    /**\r\n     * Convert the number to a base-n digit sequence.\r\n     * @param {number} num The number.\r\n     * @param {number} length The number of digits.\r\n     * @returns {number[]} The sequence of digits in decreasing order of importance. \r\n     */\n  }, {\n    key: \"toDigits\",\n    value: function toDigits(num, length) {\n      var arr = Array.from({\n        length: length\n      });\n      for (var i = length - 1; i > 0; i--) {\n        arr[i] = num % this.base;\n        num = Math.trunc(num / this.base);\n      }\n      arr[0] = num;\n      return arr;\n    }\n  }]);\n  return BaseN;\n}();\n\n/**\r\n * Iterate through multidimensional indices.\r\n * @generator\r\n * @param {number[]} dims The dimension of the multidimensional array.\r\n * @param {number[]} vals A value list to prepend.\r\n * @yields {number[]} A tuple of indices.\r\n */\nfunction MDIterator(dims) {\n  var vals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var i, _i;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(dims.length == 1)) {\n              _context.next = 10;\n              break;\n            }\n            i = 0;\n          case 2:\n            if (!(i < dims[0])) {\n              _context.next = 8;\n              break;\n            }\n            _context.next = 5;\n            return [].concat(_toConsumableArray(vals), [i]);\n          case 5:\n            i++;\n            _context.next = 2;\n            break;\n          case 8:\n            _context.next = 16;\n            break;\n          case 10:\n            _i = 0;\n          case 11:\n            if (!(_i < dims[0])) {\n              _context.next = 16;\n              break;\n            }\n            return _context.delegateYield(MDIterator(dims.slice(1), [].concat(_toConsumableArray(vals), [_i])), \"t0\", 13);\n          case 13:\n            _i++;\n            _context.next = 11;\n            break;\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })();\n}\n\n/**\r\n * @template T\r\n * @callback callback_init\r\n * @param {number} index The index.\r\n * @returns {T} The initialized object.\r\n */\n\n/**\r\n * @param {number} length The length of the array to be created.\r\n * @param {callback_init<T>} callbackfn The callback function that creates elements.\r\n * @returns {T[]}\r\n*/\nvar init = function init(length, callbackfn) {\n  return new Array(length).fill().map(function (_, i) {\n    return callbackfn(i);\n  });\n};\nvar base64_map = [].concat(_toConsumableArray(String.fromCharCode.apply(String, _toConsumableArray(new Array(26).fill().map(function (_, i) {\n  return 0x41 + i;\n})))), _toConsumableArray(String.fromCharCode.apply(String, _toConsumableArray(new Array(26).fill().map(function (_, i) {\n  return 0x61 + i;\n})))), _toConsumableArray(String.fromCharCode.apply(String, _toConsumableArray(new Array(10).fill().map(function (_, i) {\n  return 0x30 + i;\n})))), ['+', '/']);\n\n/**\r\n * Perform base64 encoding to the given uint8 array.\r\n * @param {Uint8Array[]} arr The uint8 array to encode.\r\n * @returns {string} The base64 encoding. \r\n */\n/*\r\nexport const utf8_to_b64 = (arr) => {\r\n    const num_quanta = Math.ceil(arr.length / 3);\r\n    return (Array\r\n        .from({ length: num_quanta })\r\n        .map((_, p) => {\r\n            const quantum = arr.subarray(3 * p, 3);\r\n            const a0 = quantum[0];\r\n            const a1 = quantum[1] ?? 0;\r\n            const a2 = quantum[2] ?? 0;\r\n            // Needs to handle the final quantum of encoding input\r\n            return [\r\n                a0 >> 2,\r\n                ((a0 & 0x03) << 4) | (a1 >> 4),\r\n                ((a1 & 0x0F) << 2) | (a2 >> 6),\r\n                a2 & 0x3F\r\n            ]\r\n                .map(c => base64_map[c])\r\n                .join('');\r\n        })\r\n        .join('')\r\n    );\r\n};\r\n*/\n\n//# sourceURL=webpack://my-webpack-project/./source/tools.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./source/index.js");
/******/ 	
/******/ })()
;